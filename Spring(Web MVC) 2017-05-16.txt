2017-05-16
작성자 : 정광수
=======================================================================

1) web.xml문서에 DisapthcerServlet 등록
2) url-pattern을 정함 (*.com)
   사용자로부터 요청이 test.com 로 요청되면
   DispathcerServlet->HandlerMapping ->Controller ->ViewResolver 실행
3)DispathcerServlet 이 생성될때 init 메소드가 호출되면서 호출되면서
  WEB-INF/서블릿이름-servlet.xml문서(bean 설정 문서) 를 로딩한다.
  Spring Contatiner라는 WebApplicationContext 생성
  
  *bean 설정문서의 위치와 파일이름 변경 가능.
   <init-param> 이용해서...

4) bean설정문서에 필요한 객체 생성
 - HandlerMapping ->Annotation을 이용하면 메소드 선언부 위에
                    @RequestMapping 과 동일
 - Controller     =>클래스 선언부 위에 @Controller
 - ViewResolver   =>InternalResourceViewResolver 등록 (prefix, suffix 설정)



5)@RequestMapping 속성
  value="/a.com"
  value={"","",""}=>여러개의 요청이 하나의 메소드 호출

method = RequestMethod.GET
method = RequestMethod.POST

 =>같은  요청이라 하더라도 요청방식이 다르면 실행여부가 달라진다.
 ex) @RequestMapping(value="a.com", method = RequestMethod.Post)
     @RequestMapping(value="a.com", method = RequestMethod.GET)
  params={"id"}
   => 요청에 parameter 정보에 따라 필터링 해주는 것.


6)@Controller 안에 있는 메소드 작성 -POJO 방식
 접근 제한자 : public 

 리턴 타입 :  void : 뷰에 전달될 정보는 없고, 요청된 이름이 파일이름이 된다.
              String :뷰에 전달될 정보는 없고 , 리턴값이 뷰 이름이 된다.
              ModelAndView : 뷰에 전달된 정보있고 뷰 이름도 설정.

 메소드 이름 : 아무거나... 상관 없다.
 
 인수: servlet API를 그대로 사용 가능 (HttpServletRequest, HttpServletResponse,HttpSession,....) 
       Parameter로 전달되는 이름과 동일한 이름을 인수로 선언 가능
       ex)a.com?id=jang&age=10 요청되면
        메소드(String id, int age){
         *주의 : age 값이 null 가능성이 있으면 Integer 사용!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! => null 들어와져
	}

      Model, Map, ModelMap 인수로 사용 가능
      =>뷰쪽으로 전달하게 될 객체
      =>메소드의 리턴타입이 void,String 일때 사용한다.

      DTO 객체 =>Command 객체

========================================================================================
공부
========================================================================================
 @RequestParam의 이름과 인수의 이름이 불일치할때 사용 하면 좋다.
	 * 단, @Requestparam을 설정하면 required=true 이다.
	 * 값이 전달되지 않으면 오류 발생
	 * 만약, 값이 전달되지 않을 수 있으면 required=false설정
	 * 또는 defaultValue를 설정한다
ex)
	@RequestMapping("d.do")
	public String param(@RequestParam(defaultValue="admin")  String id,
			@RequestParam(value="username" ,required=false) String name ,@RequestParam(defaultValue="0")int age){
		System.out.println("id="+id);
		System.out.println("name="+name);
		
		
		return "result";
	}



@ModelAttribute
 1)command객체의 별칭 = 메소드의 인수에 설정
 2)@ModelAttribute를 설정한 컨트롤러에서 요청을 처리한 모든 뷰들이 공동으로 사용하게 될 Model정보
   -메소드 선언 위에 설정


